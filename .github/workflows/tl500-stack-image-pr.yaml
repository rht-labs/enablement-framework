name: tl500-stack-image-pr
on:
  pull_request:
    paths:
      - codereadyworkspaces/stack/**
      - .github/workflows/tl500-stack-image-pr.yaml
jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      context: codereadyworkspaces/stack
      image_name: stack-tl500
    steps:
      - uses: actions/checkout@v1
      - name: Get image tags
        id: image_tags
        run: |
          echo -n ::set-output name=IMAGE_TAGS::
           # exposes variable VERSION
          source ${context}/VERSION
          echo ${VERSION}
      - name: Build image
        uses: redhat-actions/buildah-build@v2.6
        with:
          context: ${{ env.context }}
          dockerfiles: |
            ./${{ env.context }}/Dockerfile
          image: ${{ env.image_name }}
          oci: true
          tags: ${{ steps.image_tags.outputs.IMAGE_TAGS }}
      - name: Test image to check the version of CLIs
        run: |
          export `podman run ${{ env.image_name }}:${{ steps.image_tags.outputs.IMAGE_TAGS }} env | grep _VERSION`
          echo "Running: podman run ${{ env.image_name }}:${{ steps.image_tags.outputs.IMAGE_TAGS }} to check CLIs version"
          echo "‚öìÔ∏ècheck helm version"
          podman run ${{ env.image_name }}:${{ steps.image_tags.outputs.IMAGE_TAGS }} helm version | grep $HELM_VERSION
          echo "üêàcheck tkn version"
          podman run ${{ env.image_name }}:${{ steps.image_tags.outputs.IMAGE_TAGS }} tkn version | grep $TEKTON_VERSION
          echo "ü¶≠check kubeseal --version"
          podman run ${{ env.image_name }}:${{ steps.image_tags.outputs.IMAGE_TAGS }} kubeseal --version | grep $KUBESEAL_VERSION  
          echo "üêôcheck argocd version"
          podman run ${{ env.image_name }}:${{ steps.image_tags.outputs.IMAGE_TAGS }} argocd version | grep $ARGOCD_VERSION
          echo "üå≤check conftest --version"
          podman run ${{ env.image_name }}:${{ steps.image_tags.outputs.IMAGE_TAGS }} conftest --version | grep $CONFTEST_VERSION
          echo "ü¶®check yq --version"
          podman run ${{ env.image_name }}:${{ steps.image_tags.outputs.IMAGE_TAGS }} yq --version | grep $YQ_VERSION
          echo "ü¶®check jq --version"
          podman run ${{ env.image_name }}:${{ steps.image_tags.outputs.IMAGE_TAGS }} jq --version | grep $JQ_VERSION